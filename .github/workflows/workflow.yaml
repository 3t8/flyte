on:
  push:
    branches:
      - opta-aws

env:
  ENV_NAME: development
  YOUR_COMPANY: bamboozoology
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "${{ secrets.AWS_ACCOUNT_ID }}"
  FLYTE_STORAGE_BUCKET: "flyte-unique-nooverlap-bucket-12345"

jobs:
  calculate-pre-reqs:
    name: Calculate pre-requirements
    runs-on: ubuntu-latest
    steps:
      - name: Set inputs defaults (needed for scheduled runs)
        id: set-inputs-default
        run: |
          COMPONENTS_VERSION=${{ github.event.inputs.components_version || 'latest' }}
          echo ::set-output name=components_version::${COMPONENTS_VERSION}

          MODE=${{ github.event.inputs.mode || 'nightly' }}
          echo ::set-output name=mode::${MODE}
          # We use the mode in the subsequent next step to determine the badge version. Github has a specific syntax to define environment variables
          # as defined in https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions).
          echo 'MODE='$MODE >> $GITHUB_ENV
      - name: Determine Badge version
        id: parse-badge-version
        run: |
          BADGE_VERSION=$([ ${{ env.MODE }} == "nightly" ] && echo nightly || echo ${{ github.event.inputs.components_version }})
          echo ::set-output name=badge_version::${BADGE_VERSION}
      - name: Parse latest flytesnacks version
        id: parse-flytesnacks-version
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/flyteorg/flytesnacks/releases/latest" | jq -r .tag_name)
          echo ::set-output name=flytesnacks_latest::${LATEST_VERSION}
    outputs:
      mode: ${{ steps.set-inputs-default.outputs.mode }}
      components_version: ${{ steps.set-inputs-default.outputs.components_version }}
      badge_version: ${{ steps.parse-badge-version.outputs.badge_version }}
      flytesnacks_latest: ${{ steps.parse-flytesnacks-version.outputs.flytesnacks_latest }}
  run-testing-workflows:
    runs-on: ubuntu-latest
    needs: calculate-pre-reqs
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Configure AWS credentials 
      uses: aws-actions/configure-aws-credentials@v1  
      with: 
        # This aws account should have admin permissions
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}  
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        aws-region: ${{ env.AWS_REGION }}
    - name: set env variables
      shell: bash
      run: |
        sed -i "s/<env_name>/$ENV_NAME/" ./opta/aws/env.yaml
        sed -i "s/<your_company>/$YOUR_COMPANY/" ./opta/aws/env.yaml
        sed -i "s/<region>/$AWS_REGION/" ./opta/aws/env.yaml
        sed -i "s/<account_id>/$AWS_ACCOUNT_ID/" ./opta/aws/env.yaml
    - name: STORE env file
      shell: bash
      run: |
        aws s3 cp ./opta/aws/env.yaml s3://flyte-unique-bucket/0/opta/aws/env.yaml
    - name: SETUP AND APPLY OPTA
      shell: bash
      run: |
        sudo chmod +x .github/scripts/ci_helper.sh
        .github/scripts/ci_helper.sh setup_opta
        /home/runner/.opta/opta apply -c ./opta/aws/env.yaml --auto-approve 
    - uses: azure/setup-helm@v1
    - name: Update Helm Chart dependencies
      uses: WyriHaximus/github-action-helm3@v2
      with:
        exec: helm dep update ./opta/helm/
    - name: Pin terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0
        terraform_wrapper: false
    - name: Pin Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: actions/setup-node@v2
      with:
        node-version: "16.8.0"
    - name: Prepare opta changes
      env:
        LC_ALL: en_US.UTF-8
        LANG: en_US.UTF-8
        LANGUAGE: en_US.UTF-8
        ENV:  "${{ needs.calculate-pre-reqs.outputs.mode }}"
        FLYTEADMIN_TAG: "$${{ needs.calculate-pre-reqs.outputs.components_version }}"
        DATACATALOG_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        FLYTECONSOLE_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        FLYTEPROPELLER_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        OPTA_ENVIRONMENT: "${{ needs.calculate-pre-reqs.outputs.mode }}"
      run: |
        .github/scripts/ci_helper.sh prepare_flyte_release_build
        .github/scripts/ci_helper.sh prepare_helm_chart
    - name: set flyte variables
      shell: bash
      run: |
        sed -i "s/<unique_bucket_name>/$FLYTE_STORAGE_BUCKET/" ./opta/aws/flyte.yaml
        sed -i "s/<region>/$AWS_REGION/" ./opta/aws/flyte.yaml
        sed -i "s/<account_id>/$AWS_ACCOUNT_ID/" ./opta/aws/flyte.yaml
    - name: view flyte.yaml
      shell: bash
      run: |
        cat ./opta/aws/flyte.yaml
    - name: STORE flyte.yaml
      shell: bash
      run: |
        aws s3 cp ./opta/aws/flyte.yaml s3://flyte-unique-bucket/1/opta/aws/flyte.yaml
    - name: OPTA APPLY FLYTEADMIN
      shell: bash
      run: |
        opta apply -c ./opta/aws/flyte.yaml --auto-approve
    - name: DESTROY FLYTE Opta
      shell: bash
      run: |
        opta destroy -c ./opta/aws/flyte.yaml --auto-approve 
    - name: DESTROY OPTA ENV
      shell: bash
      run: |
        opta destroy -c ./opta/aws/env.yaml --auto-approve


