on:
  push:
    branches:
      - opta-aws
  workflow_dispatch:
    inputs:
      mode:
        description: "Mode of operation (either nightly or release)"
        required: true
        default: "nightly"
        type: choice
        options:
          - nightly
          - release
      components_version:
        description: "Version used by all components. Leave as latest for the nightly runs and pick a flyte release version in case of a release test (e.g. the full string \"v0.18.2\")"
        required: true
        default: "latest"
        type: string

permissions:
  id-token: write
  contents: read

env:
  ENV_NAME: development
  YOUR_COMPANY: bamboozoology
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "${{ secrets.AWS_ACCOUNT_ID }}"
  FLYTE_STORAGE_BUCKET: flyte-unique-nooverlap-bucket-123456

jobs:
  set-env-vars:
    runs-on: ubuntu-latest
    steps:
     - name: set env variables
       id: set-env-vars
       shell: bash
       run: |
         echo "::set-output name=aws_region::$AWS_REGION"
         echo "::set-output name=your_company::$YOUR_COMPANY"
         echo "::set-output name=env_name::$ENV_NAME"
         echo "::set-output name=flyte_storage_bucket::$FLYTE_STORAGE_BUCKET"
    outputs:
      aws-region: ${{ steps.set-env-vars.outputs.aws_region }}
      your-company: ${{ steps.set-env-vars.outputs.your_company }}
      env-name: ${{ steps.set-env-vars.outputs.env_name }}
      flyte-bucket: ${{ steps.set-env-vars.output.flyte_storage_bucket }}
  create-opta-aws:
    needs:
      - set-env-vars
    # TODO: UPDATE THIS TO RELEVANT LOCATION ...
    # likely: flyteorg/flyte.github/workflows/careate_opta_aws.yml@main
    uses: brucearctor/flyte/.github/workflows/create_opta_aws.yml@opta-aws
    with:
      aws-region: "${{ needs.set-env-vars.outputs.aws-region }}"
      your-company: "${{ needs.set-env-vars.outputs.your-company }}"
      env-name: "${{ needs.set-env-vars.outputs.env-name }}"
      flyte-storage-bucket: "${{ needs.set-env-vars.outputs.flyte-bucket }}"
    secrets: inherit
  calculate-pre-reqs:
    # TODO: UPDATE THIS TO RELEVANT LOCATION ...
    # likely: flyteorg/flyte.github/workflows/calculate_pre_reqs.yml@main
    uses: brucearctor/flyte/.github/workflows/calculate_pre_reqs.yml@opta-aws
    with:
      mode: ${{ github.event.inputs.mode }}
      components_version: ${{ github.event.inputs.components_version }}
  run-testing-workflows:
    runs-on: ubuntu-latest
    needs:
      - set-env-vars
      - calculate-pre-reqs
      - create-opta-aws
    steps:
    - uses: azure/setup-helm@v1
    - name: Update Helm Chart dependencies
      uses: WyriHaximus/github-action-helm3@v2
      with:
        exec: helm dep update /home/runner/work/flyte/flyte/opta/helm/
    - name: Pin terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0
        terraform_wrapper: false
    - name: Pin Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: actions/setup-node@v2
      with:
        node-version: "16.8.0"
    - name: Prepare opta changes
      env:
        LC_ALL: en_US.UTF-8
        LANG: en_US.UTF-8
        LANGUAGE: en_US.UTF-8
        ENV:  "${{ needs.calculate-pre-reqs.outputs.mode }}"
        FLYTEADMIN_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        DATACATALOG_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        FLYTECONSOLE_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        FLYTEPROPELLER_TAG: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        OPTA_ENVIRONMENT: "${{ needs.calculate-pre-reqs.outputs.mode }}"
      run: |
        .github/scripts/ci_helper.sh prepare_flyte_release_build
        .github/scripts/ci_helper.sh prepare_helm_chart
  run-mor-workflows:
    needs:
      - set-env-vars
      - calculate-pre-reqs
      - create-opta-aws
    # TODO: UPDATE THIS TO RELEVANT LOCATION ...
    # likely: flyteorg/flyte.github/workflows/calculate_pre_reqs.yml@main
    uses: brucearctor/flyte/.github/workflows/prep_aws_flyte_yaml.yml@opta-aws
    with:
      aws-region: "${{ steps.set-env-vars.outputs.aws_region }}"
      flyte-storage-bucket: "
      dns: "${{ needs.create-aws-opta.outputs.dns }}"
    secrets: inherit


  additiona-workflo:
    runs-on: ubuntu-latest
    needs:
      - set-env-vars
      - calculate-pre-reqs
      - create-opta-aws
    steps:
    - name: OPTA APPLY FLYTE
      shell: bash
      run: |
        cd opta/aws
        opta apply -c flyte.yaml --auto-approve
    - name: Setup flytectl
      uses: unionai-oss/flytectl-setup-action@v0.0.1
    - name: update configs
      env:
        DNS: ${{ steps.opta-dns.outputs.dns }}
      shell: bash
      run: |
        echo $DNS
        sed -i "s/<dns_of_cluster>/$DNS/" .github/ci_config/config.yaml
        sed -i "s/<dns_of_cluster>/$DNS/" .github/ci_config/config
    - name: see config files
      shell: bash
      run: |
        cat .github/ci_config/config.yaml
        cat .github/ci_config/config
    - name: check version
      env:
        OMG_VERSION: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
      shell: bash
      run: |
        echo $OMG_VERSION
    - name: Register flytesnacks examples
      uses: unionai/flyte-register-action@v0.0.2
      with:
        flytesnacks: true
        project: flytesnacks
        version: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        domain: development
        config: .github/ci_config/config.yaml
    - name: Setup Flytekit
      env:
        DNS: ${{ steps.opta-dns.outputs.dns }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install flytekit
        pip freeze
    # TODO: add a badge for when test is running
    - name: Run tests
      id: run-tests
      env:
        VERSION: "${{ needs.calculate-pre-reqs.outputs.components_version }}"
        PRIORITIES: P0,P1
        # TODO REMOVE BELOW FLYTE_SDK_USE_STRUCTURED_DATASET ONCE ON v1
        FLYTE_SDK_USE_STRUCTURED_DATASET: "TRUE"
      shell: bash
      run: |
        run_tests_output=$(./boilerplate/flyte/end2end/end2end.sh .github/ci_config/config )
        echo "$run_tests_output"  # for debugging purposes
        badges=$(echo "$run_tests_output" | tail -n1)
        echo "$badges"  # for debugging purposes
        echo ::set-output name=badges::${badges}
    # TODO: Add a slack update after tests run
  destroy-cluster:
    # TODO: UPDATE THIS TO RELEVANT LOCATION ...
    # likely: flyteorg/flyte.github/workflows/calculate_pre_reqs.yml@main
    uses: brucearctor/flyte/.github/workflows/destroy_cluster.yml@opta-aws
    with:
      aws-region: "${{ needs.set-env-vars.outputs.aws_region }}"
    needs:
      - set-env-vars
      - calculate-pre-reqs
      - run-testing-workflows
