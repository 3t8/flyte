on:
  workflow_call:
    inputs:
      dns:
        type: string
        required: true
      components_version:
        type: string
        required: true

jobs:
  run-tests:
    name: flytekit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup flytectl
        uses: unionai-oss/flytectl-setup-action@v0.0.1
      - name: update dns
        shell: bash
        run: |
          sed -i "s/<dns_of_cluster>/${{ inputs.dns }}/" /home/runner/work/flyte/flyte/.github/ci_config/config.yaml
      - name: Register flytesnacks examples
        uses: unionai-oss/flyte-register-action@v0.0.2
        with:
          flytesnacks: true
          project: flytesnacks
          version: ${{ inputs.components_version }}
          domain: development
          config: /home/runner/work/flyte/flyte/.github/ci_config/config.yaml
      - name: Archive config.yaml artifact
        uses: actions/upload-artifact@v3
        with:
          name: config.yaml
          path: |
            /home/runner/work/flyte/flyte/.github/ci_config/config.yaml
      - name: Setup Flytekit
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install flytekit==v1.2.0a0
          pip install --upgrade importlib-metadata
          pip show importlib-metadata
          pip freeze
          curl -sL https://ctl.flyte.org/install | bash
          flytectl -c /home/runner/work/flyte/flyte/.github/ci_config/config.yaml get projects
      # TODO: add a badge for when test is running
      # TODO: REMOVE PIP FREEZE once done debugging!
      - name: PIP FREEZE!
        shell: bash
        run: |
          pip freeze
      # TODO: REMOVE Python -V once done debugging!
      - name: python -v
        shell: bash
        run: |
          python -V
      - name: Run tests
        id: run-tests
        env:
          VERSION: ${{ inputs.components_version }}
          PRIORITIES: P0,P1
        shell: bash
        run: |
          run_tests_output=$(/home/runner/work/flyte/flyte/boilerplate/flyte/end2end/end2end.sh /home/runner/work/flyte/flyte/.github/ci_config/config.yaml )
          echo "$run_tests_output"  # for debugging purposes
          badges=$(echo "$run_tests_output" | tail -n1)
          echo "$badges"  # for debugging purposes
          echo ::set-output name=badges::${badges}
        # TODO: Add a slack update after tests run
